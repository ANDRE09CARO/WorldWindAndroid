plugins {
    id 'com.jfrog.bintray' version '1.7.3'
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 24
    buildToolsVersion '25.0.3'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 24
        versionCode 50
        versionName '0.5.11'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        // Setting returnDefaultValues to true prevents un-mocked Android objects from throwing exceptions.
        // Use this only as a workaround; Mockito is preferred.
        // TODO change unitTests.returnDefaultValues to false
        unitTests.returnDefaultValues = true
    }
    productFlavors {
    }
    lintOptions {
        abortOnError false
        disable 'GradleDependency'
    }
}

dependencies {
    compile 'com.android.support:support-annotations:24.2.1'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.0.43-beta'
    // PowerMockito is required to mock static methods like Logger.log
    testCompile('org.powermock:powermock-api-mockito:1.6.2') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testCompile('org.powermock:powermock-module-junit4:1.6.2') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
}

publishing {
    publications {
        Bintray(MavenPublication) {
            artifact bundleSourcesJar
            artifact bundleJavadocJar
            artifact file('./build/outputs/aar/worldwind-release.aar')
            groupId System.getenv('GROUP_ID') ?: 'gov.nasa.worldwind.android'
            artifactId System.getenv('ARTIFACT_ID') ?: 'worldwind'
            version android.defaultConfig.versionName
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                // Iterate over the compile dependencies
                configurations.compile.allDependencies.each {
                    if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    publications = ['Bintray']
    publish = true
    pkg {
        repo = System.getenv('BINTRAY_REPOSITORY')
        name = System.getenv('BINTRAY_PACKAGE')
        licenses = ['NASA-1.3']
        version {
            name = android.defaultConfig.versionName
            desc = 'World Wind Android'
        }
    }
}

// Define common documentation output directory
def docOutput = file('./build/outputs/doc/')

task compileJavadocSources(type: Javadoc) {
    description 'Creates the Javadoc API documentation'
    source android.sourceSets.main.java.srcDirs
    include('**/*.java')
    title 'NASA World Wind Android'
    options.windowTitle 'NASA World Wind Android'
    options.memberLevel = JavadocMemberLevel.PUBLIC
    destinationDir file(new File(docOutput, 'javadoc'))
    failOnError false
}

task bundleJavadocJar(type: Jar) {
    description 'Bundles Javadoc API documentation into a jar'
    classifier 'javadoc'
    from compileJavadocSources
    destinationDir docOutput
}

task bundleJavadocZip(type: Zip) {
    description 'Bundles Javadoc API documentation into a zip file'
    classifier 'javadoc'
    from compileJavadocSources
    destinationDir docOutput
}

task bundleSourcesJar(type: Jar) {
    description 'Bundles the source into a jar'
    classifier 'sources'
    from android.sourceSets.main.java.srcDirs
    destinationDir docOutput
}

// Attach the javadoc generation to the assemble task for execution during build
assemble.dependsOn(bundleJavadocZip)

// Attach the javadoc and source jar bundling to the Bintray upload task
bintrayUpload.dependsOn([build, bundleJavadocJar, bundleSourcesJar])

artifacts {
    archives bundleJavadocJar
    archives bundleSourcesJar
}